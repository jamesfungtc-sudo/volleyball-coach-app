I've completed a comprehensive architectural analysis of your volleyball coach app. Here's the executive summary:
Key Findings
Current Grade: C+ - Functional but has critical UX friction for live game situations
Major Issues Identified:
Context Isolation - MatchContext and OpponentAnalysisContext don't communicate, so you can't track opponent patterns for the active match you're recording stats for
Navigation Overhead - Full page reloads required to switch between tracking your team vs opponent (3 taps + reload)
Slow Match Setup - 6+ seconds and 3 API calls before you can start recording points
No Auto-Save - Manual save button means risk of data loss
Metadata Duplication - Team/player data fetched 3 separate times across different pages
Top 3 Recommendations (Prioritized for Live Game UX)
#1: Global Match Session Context (4 hours)
Create app-level context to track "current active match" so Opponent Analysis knows which match is live
Impact: Enables cross-feature awareness
Breaking: NO
#2: Tabbed Live Match Mode (8 hours) ⭐ CRITICAL
Single page with 3 tabs: [Point Entry] [Stats] [Opponent]
Swipe between modes instantly (zero navigation overhead)
Persistent match state across tabs
Impact: Reduces opponent tracking from 3 taps + reload → 1 swipe
#3: Centralized Data Cache (3 hours)
Cache teams/players in localStorage with 5-min TTL
Impact: 6s → 1s match setup time
Benefit: Offline support
The analysis document includes:
Complete implementation code for all 10 recommendations
35-hour implementation plan broken into 4 weekly phases
Migration strategy with zero breaking changes
Expected improvements: 6x faster match setup, instant mode switching